@function to-array-map($value) {
    @if type-of($value) == list {
        $map: ();
        @if length($value) > 1 {
            @for $i from 1 through length($value) {
                $map: map-merge($map, (nth($value, $i)));
            }
        }
        @return $map;
    }

    @return if(type-of($value) != map, (1: $value), $value);
}

@function is_like_string($value) {
	$result: null;
	$allowed: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9'; // Allowed characted to start with
	@if type-of($value) == map or type-of($value) == list or type-of($value) == bool {
		@return false;
	}
	@else if type-of($value) == string {
		@return true;
	}
	@else {
		$result: $value+'';
		@for $i from 1 through str-length($result) {
			$char: unquote(str-slice($result, $i, $i));
			@if index($allowed, $char) == null {
				@return true;
			}
		}
		@return false;
	}
	@return false;
}

@function _sc-to-list($value, $keep: 'both') {
  $keep: if(index('keys' 'values' 'both', $keep), $keep, 'both');

  @if type-of($value) == map {
    $keys: ();
    $values: ();
    @each $key, $val in $value {
      $keys: append($keys, $key);
      $values: append($values, $val);
    }

    @if $keep == 'keys' {
      @return $keys;
    }
    @else if $keep == 'values' {
      @return $values;
    }
    @else {
      @return zip($keys, $values);
    }
  }

  @return if(type-of($value) != list, ($value,), $value);
}

@function to-list($value, $keep: 'both') {
    @return _sc-to-list($value,$keep);
}

@function last($list) {
  @return nth($list, length($list));
}

@function get-alias-by-width($key) {
	@if is_like_string($key) == true {
		@error "#($key} must be a number";
		@return;
	}
	@else {
		$resolution: ();
		@if variable-exists(pinet-resolutions) {
			@each $res in $pinet-resolutions {
				@if type-of($res) == map {
					$resolution: append($resolution, $res);
				}
			}
			$result: to-array-map($resolution);
			@return map-get($result, $key);
		}
	}
	@return false;
}

@function map-swap($map) {
	$newmap: ();
	@each $key,$value in $map {
		$new: ($value: $key);
		$newmap: map-merge($newmap, $new);
	}
	@return $newmap;
}

@function get-width-by-alias($alias) {
	@if is_like_string($alias) == true {
		$resolution: ();
		@if variable-exists(pinet-resolutions) {
			@each $res in $pinet-resolutions {
				@if type-of($res) == map {
					$resolution: append($resolution, $res);
				}
			}
			$result: to-array-map($resolution);
			$result: map-swap($result);
			@return map-get($result, $alias);
		}
	}
	@else {
		@error "#($alias} must be like string";
		@return;
	}
}

@function get-aliass() {
	$aliass: ();
	@if variable-exists(pinet-resolutions) {
		@each $res in $pinet-resolutions {
			@if type-of($res) == map {
				$val: nth(map-values($res), 1);
				$aliass: join($aliass, $val, comma);
			}
		}
		@return $aliass;
	}
}

@function cal($n) {
	@return $n / strip-units($max_screen_width) * $screen-width;
}

@function trans-to-width($value) {
	@if is_like_string($value) {
		@return get-width-by-alias($value);
	}
	@else {
		@return $value;
	}
}


@function autocheck($value...) {
	$params: $value;
	@if length($params) == 2 {
		@if type-of(nth($params, 2))== map {
			$resolutions: nth($params, 2);
			$reslen: length($resolutions);
			$listres: to-list($resolutions);
			@if $reslen == 1{
				$second: nth($listres, 1);
				$res: trans-to-width(nth($second,1));

				@if strip-units($screen-width) > ($res - 1) and strip-units($screen-width) < 2880 {
					@return true, nth($second, 2);
				}
				@else {
					@return false, nth($params, 1);
				}
			}
			@else if $reslen == 2 {
				$second: nth($listres, 1);
				$thids: nth($listres, 2);
				$sres: trans-to-width(nth($second,1));
				$tres: trans-to-width(nth($thids,1));

				@if strip-units($screen-width) > ($sres - 1) and strip-units($screen-width) < $tres {
					@return true, nth($second, 2);
				}
				@if strip-units($screen-width) > ($tres - 1) and strip-units($screen-width) < 2880 {
					@return true, nth($thids, 2);
				}
				@else {
					@return false, nth($params, 1);
				}
			}
		}
		@else {
			@return false, nth($params, 1);
		}
	}
	@return false, $params;
}

@function remove-nth($list, $index) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  }

  @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  }

  @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  }

  @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i != $index {
        $result: join($result, nth($list, $i), comma);
      }
    }
  }

  @return $result;
}

@function remove-last($args) {
	@return remove-nth($args, length($args));
}

@function autos($args...)  {
	$params: $args;
	@if type-of(last($args)) == string {
		$callback: last($args);
		$params: remove-last($args);
	}
	@else {
		$callback: -1;
		$params: $args;
	}
	$result: autocheck($params...);
	@if nth($result, 1) == false {
		$result: nth(nth($result, 2), 1);
		@if $callback != -1 {
			$result: call($callback, $result);
		}
	}
	@else {
		$result: nth(nth($result, 2), 1);
	}
	@return $result;
}

@function res($args...) {
	@if length($args) == 1 {
		@return autos(nth($args, 1), cal);
	}
	@else {
		@return autos(nth($args, 1), nth($args, 2), cal);
	}
}